#include <iostream>
#include <cstdio>
#include <sstream>
#include <string>
#include <memory>
#include <vector>

#include "gtest/gtest.h"
#include "parser/parser.h"
#include "ast/ast.h"
#include "ast/program.h"

namespace pascal2c::parser
{
    template <typename Tp>
    using vector = ::std::vector<Tp>;
    using string = ::std::string;

    TEST(TotalParserTest, TestParse)
    {
        FILE *input = fopen("../example/example2.pas", "r");
        const string result =
            "1:1 Program: \n"
            "1:1     ProgramHead: compilertest\n"
            "\n"
            "3:1     ProgramBody: \n"
            "4:3         ConstDeclaration: pi\n"
            "            4:8             3.1416\n"
            "7:3         VarDeclaration: \n"
            "7:13             Type: array [1..5] of integer\n"
            "7:3             IdList: intarray\n"
            "8:3         VarDeclaration: \n"
            "8:14             Type: array [2..2] of real\n"
            "8:3             IdList: realarray\n"
            "9:3         VarDeclaration: \n"
            "9:6             Type: integer\n"
            "9:3             IdList: i\n"
            "11:1         Subprogram: \n"
            "11:1             SubprogramHead: function add integer\n"
            "11:14                 Parameter: integer\n"
            "11:14                     IdList: x, y\n"
            "12:1             SubprogramBody: \n"
            "                12:1 CompoundStatement :1\n"
            "                statement 1:\n"
            "                    13:3 AssignStatement :\n"
            "                    Variable:\n"
            "                        13:3 variable:add\n"
            "                    Expr :\n"
            "                        13:10 binary_op:'+'\n"
            "                        lhs :\n"
            "                            13:10 CallOrVar: x\n"
            "                        rhs :\n"
            "                            13:14 CallOrVar: y\n"
            "16:1         Subprogram: \n"
            "16:1             SubprogramHead: procedure swap\n"
            "16:16                 Parameter: var integer\n"
            "16:20                     IdList: x, y\n"
            "17:1             SubprogramBody: \n"
            "18:3                 VarDeclaration: \n"
            "18:9                     Type: integer\n"
            "18:3                     IdList: temp\n"
            "                19:1 CompoundStatement :3\n"
            "                statement 1:\n"
            "                    20:3 AssignStatement :\n"
            "                    Variable:\n"
            "                        20:3 variable:temp\n"
            "                    Expr :\n"
            "                        20:11 CallOrVar: x\n"
            "                statement 2:\n"
            "                    21:3 AssignStatement :\n"
            "                    Variable:\n"
            "                        21:3 variable:x\n"
            "                    Expr :\n"
            "                        21:8 CallOrVar: y\n"
            "                statement 3:\n"
            "                    22:3 AssignStatement :\n"
            "                    Variable:\n"
            "                        22:3 variable:y\n"
            "                    Expr :\n"
            "                        22:8 CallOrVar: temp\n"
            "25:1         Subprogram: \n"
            "25:1             SubprogramHead: procedure printarrays\n"
            "\n"
            "26:1             SubprogramBody: \n"
            "27:3                 VarDeclaration: \n"
            "27:6                     Type: integer\n"
            "27:3                     IdList: i\n"
            "                28:1 CompoundStatement :4\n"
            "                statement 1:\n"
            "                    29:3 CallStatement :\n"
            "                    name:writeln\n"
            "                    expr 1:\n"
            "                        29:11 string: Integer array:\n"
            "                statement 2:\n"
            "                    30:3 ForStatement:\n"
            "                    id: i\n"
            "                    from:\n"
            "                        30:12 1\n"
            "                    to:\n"
            "                        30:17 5\n"
            "                    do:\n"
            "                        31:5 CallStatement :\n"
            "                        name:writeln\n"
            "                        expr 1:\n"
            "                            31:13 string: intArray[\n"
            "                        expr 2:\n"
            "                            31:26 CallOrVar: i\n"
            "                        expr 3:\n"
            "                            31:29 string: ] = \n"
            "                        expr 4:\n"
            "                            31:37 variable:intarray\n"
            "                            index 1:\n"
            "                                31:46 CallOrVar: i\n"
            "                statement 3:\n"
            "                    33:3 CallStatement :\n"
            "                    name:writeln\n"
            "                    expr 1:\n"
            "                        33:11 string: Real array:\n"
            "                statement 4:\n"
            "                    34:3 ForStatement:\n"
            "                    id: i\n"
            "                    from:\n"
            "                        34:12 unary_op:'-'\n"
            "                        expr :\n"
            "                            34:13 2\n"
            "                    to:\n"
            "                        34:18 2\n"
            "                    do:\n"
            "                        35:5 CallStatement :\n"
            "                        name:writeln\n"
            "                        expr 1:\n"
            "                            35:13 string: realArray[\n"
            "                        expr 2:\n"
            "                            35:27 CallOrVar: i\n"
            "                        expr 3:\n"
            "                            35:30 string: ] = \n"
            "                        expr 4:\n"
            "                            35:38 variable:realarray\n"
            "                            index 1:\n"
            "                                35:48 CallOrVar: i\n"
            "        44:1 CompoundStatement :12\n"
            "        statement 1:\n"
            "            45:3 ForStatement:\n"
            "            id: i\n"
            "            from:\n"
            "                45:12 1\n"
            "            to:\n"
            "                45:17 5\n"
            "            do:\n"
            "                46:5 AssignStatement :\n"
            "                Variable:\n"
            "                    46:5 variable:intarray\n"
            "                    index 1:\n"
            "                        46:14 CallOrVar: i\n"
            "                Expr :\n"
            "                    46:20 binary_op:'*'\n"
            "                    lhs :\n"
            "                        46:20 CallOrVar: i\n"
            "                    rhs :\n"
            "                        46:24 2\n"
            "        statement 2:\n"
            "            48:3 AssignStatement :\n"
            "            Variable:\n"
            "                48:3 variable:realarray\n"
            "                index 1:\n"
            "                    48:13 unary_op:'-'\n"
            "                    expr :\n"
            "                        48:14 2\n"
            "            Expr :\n"
            "                48:20                 0.5000\n"
            "        statement 3:\n"
            "            49:3 AssignStatement :\n"
            "            Variable:\n"
            "                49:3 variable:realarray\n"
            "                index 1:\n"
            "                    49:13 unary_op:'-'\n"
            "                    expr :\n"
            "                        49:14 1\n"
            "            Expr :\n"
            "                49:20                 1.5000\n"
            "        statement 4:\n"
            "            50:3 AssignStatement :\n"
            "            Variable:\n"
            "                50:3 variable:realarray\n"
            "                index 1:\n"
            "                    50:13 0\n"
            "            Expr :\n"
            "                50:19                 2.5000\n"
            "        statement 5:\n"
            "            51:3 AssignStatement :\n"
            "            Variable:\n"
            "                51:3 variable:realarray\n"
            "                index 1:\n"
            "                    51:13 1\n"
            "            Expr :\n"
            "                51:19                 3.5000\n"
            "        statement 6:\n"
            "            52:3 AssignStatement :\n"
            "            Variable:\n"
            "                52:3 variable:realarray\n"
            "                index 1:\n"
            "                    52:13 2\n"
            "            Expr :\n"
            "                52:19                 4.5000\n"
            "        statement 7:\n"
            "            54:3 CallStatement :\n"
            "            name:writeln\n"
            "            expr 1:\n"
            "                54:11 string: Before swap:\n"
            "        statement 8:\n"
            "            55:3 CallStatement :\n"
            "            name:printarrays\n"
            "        statement 9:\n"
            "            57:3 IfStatement :\n"
            "            condition:\n"
            "                57:6 binary_op:'='\n"
            "                lhs :\n"
            "                    57:6 function:add\n"
            "                    expr 1:\n"
            "                        57:10 variable:intarray\n"
            "                        index 1:\n"
            "                            57:19 2\n"
            "                    expr 2:\n"
            "                        57:23 variable:intarray\n"
            "                        index 1:\n"
            "                            57:32 4\n"
            "                rhs :\n"
            "                    57:38 13\n"
            "            if_part:\n"
            "                58:3 CompoundStatement :2\n"
            "                statement 1:\n"
            "                    59:5 CallStatement :\n"
            "                    name:writeln\n"
            "                    expr 1:\n"
            "                        59:13 string: Swapping intArray[2] and intArray[4]\n"
            "                statement 2:\n"
            "                    60:5 CallStatement :\n"
            "                    name:swap\n"
            "                    expr 1:\n"
            "                        60:10 variable:intarray\n"
            "                        index 1:\n"
            "                            60:19 2\n"
            "                    expr 2:\n"
            "                        60:23 variable:intarray\n"
            "                        index 1:\n"
            "                            60:32 4\n"
            "        statement 10:\n"
            "            63:3 CallStatement :\n"
            "            name:writeln\n"
            "            expr 1:\n"
            "                63:11 string: After swap:\n"
            "        statement 11:\n"
            "            64:3 CallStatement :\n"
            "            name:printarrays\n"
            "        statement 12:\n"
            "            66:3 CallStatement :\n"
            "            name:writeln\n"
            "            expr 1:\n"
            "                66:11 string: PI = \n"
            "            expr 2:\n"
            "                66:20 CallOrVar: pi";
        const vector<string> err;

        Parser par(input);
        auto expr = par.Parse();
        const vector<std::string> &err_messages = par.err_msg();
        // for (std::string err_message : err_messages)
        //{
        //     std::cout << err_message << std::endl;
        // }
        // std::cout << expr->ToString(0) << std::endl
        //           << std::endl;
        EXPECT_EQ(par.err_msg(), err);
        EXPECT_EQ(expr->ToString(0), result);

        fclose(input);
    }
}
